#!/usr/bin/python

import sys
# ./3700send <recv_host>:<recv_port>

print 'Number of arguments:', len(sys.argv), 'arguments.'
print 'Argument List:', str(sys.argv)

var errorMessage = "this should print to STDERR"

# To aid in grading and debugging, your sending program should print out messages to the console:
# When a sender sends a packet (including retransmission), it should print the following to STDERR:
# <timestamp> [send data] start (length)
# where timestamp is a timestamp (down to the microsecond), start is the beginning offset of the data sent in the
# packet, and length is the amount of the data sent in that packet. When your 3700send receives an acknowledgement,
# you should also print to STDERR
# <timestamp> [recv ack] end where end is the last offset that was acknowledged.
# You may also print some messages of your own to indicate
# timeouts, etc, depending on your design, but make it concise and readable; a function mylog(char *fmt, ...) is
# provided for this purpose.
# The command line syntax for your receiving program is given below. The receiving program will start up and will bind
# to a random local port; once bound, it will print out the following to STDERR:
def printError():
    print >> sys.stderr, errorMessage


"""


The syntax for launching your receiving program is therefore:
./3700recv
To aid in grading and debugging, your receiving program should print out messages to STDERR:
When the receiver receives a valid data packet, it should print
<timestamp> [bound] port
<timestamp> [recv data] start (length) status
where start is the beginning offset of the data sent in the packet, and length is the amount of the data sent in that
packet, and status is one of ACCEPTED (in-order), ACCEPTED (out-of-order), or IGNORED. If a corrupt packet arrives,
it should print to STDERR
<timestamp> [recv corrupt packet]
Similar to 3700send, you may add your own output messages.
Both the sender and the receiver should print out a message to STDERR after completion of file transfer, and then exit:
<timestamp> [completed]
You should develop your client program on the CCIS Linux machines (ideally cs3600tcp.ccs.neu.edu), as these have the
necessary compiler and library support. You are welcome to use your own Linux/OS X/Windows machines, but you are
responsible for getting your code working, and your code must work when graded on cs3600tcp.ccs.neu.edu.

Testing Your Code

In order for you to test your code over an unreliable network, we have set up a machine that will configurably emulate
a network that will drop, reorder, damage, duplicate, and delay your packets. This machine is part of the CCIS network,
and you can log in to it with your CCIS username and credentials. If you have any problems accessing the machine,
please post on Piazza.
The machine is cs3600tcp.ccs.neu.edu; you should make sure you are able to ssh to the machine and run your code on it.
You will need to use the loopback int
"""