#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json
from create_log_file import add_to_log
from buffer import Buffer



def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30
RECV_BUFFER = Buffer()


# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:

  #ready = select.select([sock], [], [], TIMEOUT)
  #result = None
  #if ready:
  result = sock.recvfrom(MSG_SIZE)
  add_to_log("(RECV) received from socket: " + str(result))




  # If nothing is ready, we hit the timeout
  if result:

      add_to_log("(RECV) result exists: ")

      (data, addr) = result

      try:
        decoded = json.loads(data)

        if RECV_BUFFER.free_slots():
          #if decoded['sequence'] > RECV_BUFFER.get_top()['sequence']:
            #add to 'rest' of buffer


          RECV_BUFFER.add(decoded)

          add_to_log("(RECV) received message: " + str(decoded))


          # If the EOF flag is set, exit
          if (decoded['eof']):
            log("[completed]")
            sys.exit(0)

          # If there is data, we accept it and print it out
          if (decoded['data']):
            # If we receive data, we assume it's in-order
            # You will need to do much more here
            log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
            sys.stdout.write(decoded['data'])
            RECV_BUFFER.remove_top()

          # Send back an ack to the sender
          msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
          log("ABOUT TO SEND " + msg)

          if sock.sendto(msg, addr) < len(msg):
            log("[error] unable to fully send packet")
            add_to_log("(RECV) unable to fully send ack: " + str(msg) + " of length " + str(len(msg)))

          else:
            add_to_log("(RECV) sending ack: " + str(msg) + " of length " + str(len(msg)))
        else:
          add_to_log("(RECV) NO FREE SLOTS")



      except (ValueError, KeyError, TypeError) as e:
        log("[recv corrupt packet]")
        raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
