#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json
from packet import Packet, create_package_from_json


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)
  print "RECEIVED " + str(result)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:

      decoded = json.loads(data)
      #package_in = create_package_from_json(decoded)

      # If the EOF flag is set, exit
      #if package_in.eof:
      if decoded["eof"]:
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      #if package_in.data:
      if decoded["data"]:
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        #log("[recv data] " + str(package_in.sequence_number) + " (" + str(len(package_in.data)) + ") ACCEPTED (in-order)")
        log("[recv data] " + str(decoded["sequence"]) + " (" + str(len(decoded["data"])) + ") ACCEPTED (in-order)")
        #sys.stdout.write(package_in.data)
        sys.stdout.write(decoded["data"])

      # TODO, create new packet that is an ACK
      # Send back an ack to the sender
      msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
      log("ABOUT TO SEND " + msg)
      if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
