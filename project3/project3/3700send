#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import time
import select
import json
from buffer import Buffer
from create_log_file import add_to_log

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
SEND_BUFFER = Buffer()
SEND_TIME = time.time()


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def send_next_packet():
  add_to_log("(SEND) send_next_packet called ")


  global SEQUENCE
  global SEND_TIME
  global SEND_BUFFER

  #if SEND_BUFFER.free_slots:

  data = sys.stdin.read(DATA_SIZE)
  add_to_log("(SEND) read in message from stdin: " + str(data))

  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})

    # store into buffer
    SEND_BUFFER.add(msg)
    msg = SEND_BUFFER.get_top()

    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
      add_to_log("(SEND) Unable to fully send packet")
      SEND_TIME = time.time()

    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      add_to_log("(SEND) sent with sequence: " + str(SEQUENCE))

    return True
  else:
    add_to_log("(SEND) empty message from stdin")

    return False

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:

  # check timeout
  if int(round((time.time() - SEND_TIME) * 1000)) > 500:
    send_next_packet()

  add_to_log("(SEND) free slots exist ")
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)
  add_to_log("(SEND) result =  ")


  if result:
    add_to_log("(SEND) message_from_stdin received ")

    (data, addr) = result
    try:
      decoded = json.loads(data)

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        SEND_TIME = time.time()
        log("[recv ack] " + str(SEQUENCE))
        SEND_BUFFER.remove_top()

        # Try to send next packet; break if no more data
        # check to see that the buffer has space to add a message
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    add_to_log("(SEND) Exiting run")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
add_to_log("(SEND) eof ")

sys.exit(0)
