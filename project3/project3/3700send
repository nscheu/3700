#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import time
import select
import json
from buffer import Buffer
from create_log_file import add_to_log

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 5
SEQUENCE = 0
SEND_BUFFER = Buffer()
SEND_TIME = time.time()
ACK_BUFFER = Buffer()


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_top_packet():
  global SEND_TIME
  global SEND_BUFFER
  message = SEND_BUFFER.get_top()
  if sock.sendto(message, dest) < len(message):
    log("[error] unable to fully resend packet")
    add_to_log("(SEND) Unable to fully resend packet")
    SEND_TIME = time.time()

  else:
    add_to_log("(SEND) resent packet ")


def loop_through_ack_buffer():
    global ACK_BUFFER
    global SEND_BUFFER


    top_ack = ACK_BUFFER.get_top()

    while top_ack:
        sequence = SEND_BUFFER.get_top()['sequence'] + len(SEND_BUFFER.get_top()['data'])

        if top_ack['sequence'] == sequence:
            ACK_BUFFER.remove_top()
            SEND_BUFFER.remove_top()
        else:
            break

def resend_timedout_packets():
  global SEND_BUFFER

  for packet in SEND_BUFFER.packets:
    message_send_time = packet['send_time']
    if int(round((time.time() - message_send_time) * 1000)) > 500:
        packet['send_time'] = float(time.time())
        send_message(packet)
        add_to_log("(SEND) ACK Time'd out - send another packet ")


def send_message(msg):
  if sock.sendto(msg, dest) < len(msg):
    log("[error] unable to fully send packet")
    add_to_log("(SEND) Unable to fully send packet")
  else:
    log("[send data] " + str(msg['sequence']) + " (" + str(len(msg['data'])) + ")")
    add_to_log("(SEND) sent with sequence: " + str(msg['sequence']))


def send_next_packet():
  add_to_log("(SEND) send_next_packet called ")


  global SEQUENCE
  global SEND_TIME
  global SEND_BUFFER

  #if SEND_BUFFER.free_slots:

  data = sys.stdin.read(DATA_SIZE)
  add_to_log("(SEND) read in message from stdin: " + str(data))

  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "send_time": float(time.time())})

    # store into buffer
    SEND_BUFFER.add(json.loads(msg))
    #msg = SEND_BUFFER.get_top()

    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
      add_to_log("(SEND) Unable to fully send packet")
      SEND_TIME = time.time()

    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
      add_to_log("(SEND) sent with sequence: " + str(SEQUENCE))

    return True
  else:
    add_to_log("(SEND) empty message from stdin")
    if not len(SEND_BUFFER.packets):
      sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
      add_to_log("(SEND) eof ")
      sys.exit(0)
    return False


# Send first packet
send_next_packet()

# Now read in data, send packets
while True:


  resend_timedout_packets()

  if SEND_BUFFER.free_slots():
    send_next_packet()

  else:
    loop_through_ack_buffer()

    try:
      result = sock.recvfrom(MSG_SIZE)

      if result:
          add_to_log("(SEND) message_from_socket received ")

          (data, addr) = result
          try:
            decoded = json.loads(data)

            if decoded['ack'] == SEND_BUFFER.get_top()['sequence'] + len(SEND_BUFFER.get_top()['data']):
              SEND_BUFFER.remove_top()
              loop_through_ack_buffer()

            else:
              ACK_BUFFER.insert_packet(decoded)

          except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
      else:
        log("[error] timeout")
        add_to_log("(SEND) Exiting run")
        sys.exit(-1)

    except socket.timeout:
      continue
      #send_top_packet()
      #add_to_log("(SEND) resending packet")

    finally:
      add_to_log("(SEND) ALL FAILED")

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
add_to_log("(SEND) eof ")

sys.exit(0)




'''

  # check timeout
  #if int(round((time.time() - SEND_TIME) * 1000)) > 500:
  #    send_top_packet()
  #    add_to_log("(SEND) ACK Time'd out - send another packet ")


  #add_to_log("(SEND) free slots exist ")
  log("ABOUT TO SLEEP")
  try:

    result = sock.recvfrom(MSG_SIZE)



    if result:
      add_to_log("(SEND) message_from_socket received ")

      (data, addr) = result
      try:
        decoded = json.loads(data)

        #NEWW-----------------------------------------------------------------------------
        #TODO:
        # DONE if ACK in sequence (packet['sequence'] == (SEND_BUFFER.get_top()['sequence'] + len(SEND_BUFFER.get_top()['data']))):
        #  DONE                    remove head from SEND_BUFFER, loop through ACK buffer, comparing against send buffer
        #
        # else: If packet['sequence'] != (SEND_BUFFER.get_top()['sequence'] + len(SEND_BUFFER.get_top()['data']))), insert into ACK buffer

        if decoded['ack'] == SEND_BUFFER.get_top()['sequence'] + len(SEND_BUFFER.get_top()['data']):
            SEND_BUFFER.remove_top()
            loop_through_ack_buffer()



        ###OLDDDD!!!!!!!!!!!!!!!!!!!!!!
        # If there is an ack, send next packet
        if decoded['ack'] == SEQUENCE:
          SEND_TIME = time.time()
          log("[recv ack] " + str(SEQUENCE))
          add_to_log("(SEND) received ack" + str(SEQUENCE))

          SEND_BUFFER.remove_top()

          # Try to send next packet; break if no more data
          # check to see that the buffer has space to add a message
          if (not send_next_packet()):
            break
      except (ValueError, KeyError, TypeError):
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      add_to_log("(SEND) Exiting run")
      sys.exit(-1)

  except socket.timeout:
    send_top_packet()
    add_to_log("(SEND) resending packet")

  finally:
    add_to_log("(SEND) ALL FAILED")


sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
add_to_log("(SEND) eof ")

sys.exit(0)
'''
